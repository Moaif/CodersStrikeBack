#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include "cmath"
#include "memory"

using namespace std;

#define PI 3.14159265

const int CHECKPOINT_RADIUS = 600;
const int POD_RADIUS = 400;
const int BOOST_THRUST = 650;
const int NUM_PODS_PER_PLAYER =2;
const int NUM_PLAYERS = 2;
const float SIMULATION_TICK_INTERVAL = 0.1f;
const int RESPONSE_TIME = 70;

const int MAX_MOVES_SIM = 1;
const int MAX_POPULATION = 100;
const float MAX_PERCENTAJE_BEST_SCORE_TO_KEEP = 0.3f;
const float MAX_ROTATION =18;
const int MAX_THRUST = 100;
const int SHIELD_PROB = 10;
const int BOOST_PROB = 10;

const int SCORE_PER_CHECKPOINT = 30000;
const float RUNNER_HUNTER_WEIGHT = 5.0f;

//Definitions
//-----------------------------------------------------------------
class Point{
    public:
    float x;
    float y;

    Point(float x, float y);
    float Distance2(const Point& p)const;
    float Distance(const Point& p)const;
};

class Unit: public Point{
    public:
    int id;
    float r;
    float vx;
    float vy;

    Unit(float x, float y,int id, float r, float vx, float vy);
    class Collision* CheckCollision(Unit& u);
    virtual void Bounce(Unit& u);
};

class Checkpoint: public Unit{
    public:
    Checkpoint(float x, float y,int id);
    virtual void Bounce(Unit& u)override;
};

class BoostManager{
    public:
    bool boostUsed = false;

    BoostManager();
    BoostManager(bool boostUsed);
};

class Pod: public Unit{
    public:    
    float angle;
    int nextCheckpointId;
    int checkpointsElapsed;
    int timeout;
    int turnsSinceLastShield;
    shared_ptr<BoostManager> boostManager;

    Pod(int id, shared_ptr<BoostManager> boostManager);    
    Pod(const Pod& pod, shared_ptr<BoostManager> boostManager);
    Pod& operator =(const Pod& pod);
    float GetAngle(const Point& p)const;
    float DiffAngle(const Point& p)const;
    void Rotate(const Point& p);
    void Rotate(float a);
    void Boost(int thrust);
    void Move(float t);
    void EndTurnCalculations();
    void Play(const Point& p, int thrust);
    Point ComputeImpulse(float vx1, float vy1, float vx2, float vy2, float x1, float y1, float x2, float y2, float m1, float m2);
    virtual void Bounce(Unit& u) override;
    void BounceWithCheckpoint(Checkpoint& c);
    void SimulateMove(const class Move& move);
    void Output(const class Move& move);

    void UpdateValues(float x, float y, float vx, float vy, float angle, int nextCheckPointId);
};

class Collision{
    public:
    Unit& a;
    Unit& b;

    Collision(Unit& a, Unit& b);
};

class Move{
    public:
    float angle;
    int thrust;

    Move();
    Move(float angle, int thrust);
    void CloneFrom(const Move& toClone);
    void Mutate(float amplitude);
};


class Solution{
    public:
    Move* moves1[MAX_MOVES_SIM];
    Move* moves2[MAX_MOVES_SIM];
    float Score;

    Solution();
    ~Solution();
    void CloneFrom(const Solution& toClone);
    void Mutate(float amplitude);
    void ConsumeTurn();
    float ScoreSolution(Pod* pods[], Checkpoint* checkpoints[]);
};

void Play(Pod*const pods[], Checkpoint* checkpoints[]);
void Test(Pod*const pods[], Checkpoint* checkpoints[]);
void Test(Pod*const pods[], Checkpoint* checkpoints[],const Solution& solution);
bool CompareSolutionsByScore(Solution* a, Solution* b);
float RandomRange(float min, float max);
float ComputeScore(Pod*const pods[], Checkpoint* checkpoints[]);
double GetTimeSinceTurnStarted();

//Variable to manage time over all the program
static clock_t TurnStartClock = 0;

//Declarations
//-----------------------------------------------------------------
Point::Point(float x, float y): x(x), y(y){}

float Point::Distance2(const Point& p)const{
    return (x - p.x)*(x - p.x) + (y - p.y)*(y - p.y);
}

float Point::Distance(const Point& p)const{
    return sqrt(Distance2(p));
}

Unit::Unit(float x, float y,int id, float r, float vx, float vy):Point(x, y), id(id), r(r), vx(vx), vy(vy){}

Collision* Unit::CheckCollision(Unit& u){
    // Square of the distance
    float dist = Distance2(u);

    // Sum of the radii squared
    float sr = (r + u.r)*(r + u.r);

    // We take everything squared to avoid calling sqrt uselessly. It is better for performances
    if (dist < sr) {
        // Objects are already touching each other. We have an immediate collision.
        return new Collision(*this, u);
    }


    return nullptr;
}

//Will be overriden on children
void Unit::Bounce(Unit& u){}

Checkpoint::Checkpoint(float x, float y, int id): Unit(x,y,id,CHECKPOINT_RADIUS,0,0){}

void Checkpoint::Bounce(Unit& u){}

BoostManager::BoostManager():boostUsed(false){};
BoostManager::BoostManager(bool boostUsed):boostUsed(boostUsed){}

Pod::Pod(int id, shared_ptr<BoostManager> boostManager):Unit(0,0,id,POD_RADIUS,0,0),angle(0.0f),nextCheckpointId(1), checkpointsElapsed(0),timeout(100),turnsSinceLastShield(4),boostManager(boostManager){}

Pod::Pod(const Pod& pod, shared_ptr<BoostManager> boostManager):Unit(pod.x,pod.y,pod.id,pod.r,pod.vx,pod.vy),
angle(pod.angle),nextCheckpointId(pod.nextCheckpointId), checkpointsElapsed(pod.checkpointsElapsed),timeout(pod.timeout),
turnsSinceLastShield(pod.turnsSinceLastShield),boostManager(boostManager) {}

Pod& Pod::operator =(const Pod& pod){
    x = pod.x;
    y = pod.y;
    id = pod.id;
    r = pod.r;
    vx = pod.vx;
    vy = pod.vy;
    angle = pod.angle;
    nextCheckpointId = pod.nextCheckpointId;
    checkpointsElapsed = pod.checkpointsElapsed;
    timeout = pod.timeout;
    turnsSinceLastShield = pod.turnsSinceLastShield;
    boostManager = pod.boostManager;

    return *this;
}

float Pod::GetAngle(const Point& p)const{
    float d = Distance(p);
    float dx = (p.x - x) / d;
    float dy = (p.y - y) / d;

    // Simple trigonometry. We multiply by 180.0 / PI to convert radiants to degrees.
    float a = acos(dx) * 180.0 / PI;

    // If the point I want is below me, I have to shift the angle for it to be correct
    if (dy < 0) {
        a = 360.0 - a;
    }

    return a;
}

float Pod::DiffAngle(const Point& p)const{
    float a = GetAngle(p);

    // To know whether we should turn clockwise or not we look at the two ways and keep the smallest
    // The ternary operators replace the use of a modulo operator which would be slower
    float right = angle <= a ? a - angle : 360.0 - angle + a;
    float left = angle >= a ? angle - a : angle + 360.0 - a;

    if (right < left) {
        return right;
    } else {
        // We return a negative angle if we must rotate to left
        return -left;
    }
}

void Pod::Rotate(const Point& p){
    float a = DiffAngle(p);
    Rotate(a);
}

void Pod::Rotate(float a){
    // Can't turn by more than 18Â° in one turn  
    if (a > 18.0) {
        a = 18.0;
    } else if (a < -18.0) {
        a = -18.0;
    }

    angle += a;

    // The % operator is slow. If we can avoid it, it's better.
    if (angle >= 360.0) {
        angle = angle - 360.0;
    } else if (angle < 0.0) {
        angle += 360.0;
    }
}

void Pod::Boost(int thrust){
    // Don't forget that a pod which has activated its shield cannot accelerate for 3 turns
    if (turnsSinceLastShield <= 3) {
        return;
    }

    // Conversion of the angle to radiants
    float ra = angle * PI / 180.0;

    // Trigonometry
    vx += cos(ra) * thrust;
    vy += sin(ra) * thrust;
}

void Pod::Move(float t){
    x += vx * t;
    y += vy * t;
}

void Pod::EndTurnCalculations(){
    x = round(x);
    y = round(y);
    vx = static_cast<int>(vx * 0.85);//Truncate
    vy = static_cast<int>(vy * 0.85);//Truncate

    //This can be a problem if the program would be infinite, but as it only works for a small number of turns, it would never get overflowed
    ++turnsSinceLastShield;

    // Don't forget that the timeout goes down by 1 each turn. It is reset to 100 when you pass a checkpoint
    timeout -= 1;
}

void Pod::Play(const Point& p, int thrust){
    Rotate(p);
    Boost(thrust);
    Move(1.0);
    EndTurnCalculations();
}


Point Pod::ComputeImpulse(float vx1, float vy1, float vx2, float vy2, float x1, float y1, float x2, float y2, float m1, float m2){
    
    float mcoeff = 2.0f*m2/(m1+m2);

    float dvx = vx1 - vx2;
    float dvy = vy1 - vy2;
    float dx = x1 - x2;
    float dy = y1 - y2;
    float dotProd = dvx * dx + dvy * dy;
    float squareProd = dx * dx + dy * dy;

    float impulseX = mcoeff * (dotProd/squareProd)*dx;
    float impulseY = mcoeff * (dotProd/squareProd)*dy;

    return Point(impulseX,impulseY);
}

void Pod::Bounce(Unit& u){
    if (Checkpoint* c = dynamic_cast<Checkpoint*>(&u)) {  
        // Collision with a checkpoint
        BounceWithCheckpoint(*c);
    } else if(Pod* pod = dynamic_cast<Pod*>(&u)) {
        // If a pod has its shield active its mass is 10 otherwise it's 1
        float m1 = turnsSinceLastShield == 0 ? 10 : 1;
        float m2 = pod->turnsSinceLastShield == 0 ? 10 : 1;
        
        Point dv1 = ComputeImpulse(vx, vy, pod->vx, pod->vy, x, y, pod->x, pod->y, m1, m2);
        Point dv2 = ComputeImpulse(pod->vx, pod->vy, vx, vy, pod->x, pod->y, x, y, m2, m1);

        float impulse1 = sqrt(dv1.x * dv1.x + dv1.y * dv1.y);
        float impulse2 = sqrt(dv2.x * dv2.x + dv2.y * dv2.y);

        if(impulse1 < 120){
            dv1.x = dv1.x * 120/impulse1;
            dv1.y = dv1.y * 120/impulse1;
        }
        if(impulse2 < 120){
            dv2.x = dv2.x * 120/impulse2;
            dv2.y = dv2.y * 120/impulse2;
        }

        vx -= dv1.x;
        vy -= dv1.y;
        pod->vx -= dv2.x;
        pod->vy -= dv2.y;
    }
}

void Pod::BounceWithCheckpoint(Checkpoint &c){
    //Safety check    
    if(nextCheckpointId != c.id){
        return;
    }

    //Handle pod data over next checkpoint
    ++nextCheckpointId;
    ++checkpointsElapsed;
    timeout = 100;
}

void Pod::SimulateMove(const class Move& move){
    Rotate(move.angle);

    int thrust = 0;
    switch(move.thrust){
        case -1:
            turnsSinceLastShield = 0;
            break;
        case MAX_THRUST+1:
            if(boostManager->boostUsed){
                thrust = MAX_THRUST;
            }else{
                thrust = BOOST_THRUST;
                boostManager->boostUsed = true;
            }
            break;
        default:
        thrust = move.thrust;
            break;
    }
    Boost(thrust);
}

void Pod::Output(const class Move& move){
    float a = angle + move.angle;

    if (a >= 360.0) {
        a = a - 360.0;
    } else if (a < 0.0) {
        a += 360.0;
    }

    // Look for a point corresponding to the angle we want
    // Multiply by 10000.0 to limit rounding errors
    a = a * PI / 180.0;
    float px = x + cos(a) * 10000.0;
    float py = y + sin(a) * 10000.0;

    if (move.thrust == -1) {
        cout << round(px) << " " << round(py) << " SHIELD" << endl;
        turnsSinceLastShield = 0;
    }else if(move.thrust == MAX_THRUST +1){
        cout << round(px) << " " << round(py) << " BOOST" << endl;
        boostManager->boostUsed = true;
    } 
    else {
        cout << round(px) << " " << round(py) << " " << move.thrust << endl;        
    }
}

void Pod::UpdateValues(float x, float y, float vx, float vy, float angle, int nextCheckPointId){
    this->x = x;
    this->y = y;
    this->vx = vx;
    this->vy = vy;
    this->angle = angle;
    if( this->nextCheckpointId != nextCheckPointId){
        ++this->checkpointsElapsed;
    }
    this->nextCheckpointId = nextCheckPointId;
}


Collision::Collision(Unit& a, Unit& b): a(a), b(b){}

Move::Move():angle(0.0f),thrust(0){
    Mutate(1.0f);
}

Move::Move(float angle, int thrust): angle(angle), thrust(thrust){}

void Move::CloneFrom(const Move& toClone){
    angle = toClone.angle;
    thrust = toClone.thrust;
}

void Move::Mutate(float amplitude){
    float angleMod = RandomRange(-MAX_ROTATION*amplitude,MAX_ROTATION*amplitude);
    angle = clamp(angle + angleMod, -MAX_ROTATION, MAX_ROTATION);
    
    if(RandomRange(0, 100) < SHIELD_PROB){
        thrust = -1;
    }else if(RandomRange(0, 100) < BOOST_PROB){//In case of boost already used, it will be a max accel, so no need to further handle it
        thrust = MAX_THRUST+1;
    }else{
        int thrustMod = RandomRange(0, MAX_THRUST*amplitude);
        thrust = clamp(thrust + thrustMod, 0, MAX_THRUST);
    }
}

Solution::Solution(): Score(0.0f){
    for(int i = 0; i < MAX_MOVES_SIM; ++i){
        moves1[i] = new Move();
        moves2[i] = new Move();
    }
}

//This wouldn't be needed if we use unique_ptr, but as im not sure of its performance, i decided to avoid them
Solution::~Solution(){
    for(int i = 0; i < MAX_MOVES_SIM; ++i){
        free(moves1[i]);
        free(moves2[i]);
    }

    free(moves1);
    free(moves2);
}

void Solution::CloneFrom(const Solution& toClone){
    for(int i = 0; i < MAX_MOVES_SIM; ++i){
        moves1[i]->CloneFrom(*toClone.moves1[i]);
        moves2[i]->CloneFrom(*toClone.moves2[i]);
    }
}

void Solution::Mutate(float amplitude){
    for(int i = 0; i < MAX_MOVES_SIM ;++i){
        moves1[i]->Mutate(amplitude);
        moves2[i]->Mutate(amplitude);
    }
}

void Solution::ConsumeTurn(){
    //Not sure whats more efficient, if clone/copy values, or shift their places
    for(int i = 0; i < MAX_MOVES_SIM-1; ++i){
        moves1[i]->CloneFrom(*moves1[i+1]);
        moves2[i]->CloneFrom(*moves2[i+1]);
    }

    //Randomize last move to get a new one
    moves1[MAX_MOVES_SIM-1]->Mutate(1.0f);
    moves2[MAX_MOVES_SIM-1]->Mutate(1.0f);
}

float Solution::ScoreSolution(Pod* pods[], Checkpoint* checkpoints[]){
    //Copy pods to avoid modyfing the real ones
    Pod* copyPods[NUM_PODS_PER_PLAYER * NUM_PLAYERS];
    for(int i = 0; i < NUM_PLAYERS; ++i){
        shared_ptr<BoostManager> boostManager = make_shared<BoostManager>(pods[i]->boostManager->boostUsed);
        for(int j = i*NUM_PODS_PER_PLAYER; j < (i+1)*NUM_PODS_PER_PLAYER; ++j){
            copyPods[j] = new Pod(*pods[j],boostManager);                
        }
    }

    //Simulate end point of the solution
    for(int i = 0; i < MAX_MOVES_SIM; ++i){
        //Pod setup based on solution
        copyPods[0]->SimulateMove(*moves1[i]);
        copyPods[1]->SimulateMove(*moves2[i]);
        //For enemies we have no moves, so they will just move to next checkpoint at max speed(can be upgraded by finding them a solution)
        copyPods[2]->Rotate(*checkpoints[copyPods[2]->nextCheckpointId]);
        copyPods[2]->Boost(100);
        copyPods[3]->Rotate(*checkpoints[copyPods[3]->nextCheckpointId]);
        copyPods[3]->Boost(100);

        Play(copyPods, checkpoints);
    }

    Score = ComputeScore(copyPods, checkpoints);

    //Free copy pods
    for(int i = 0; i < NUM_PODS_PER_PLAYER* NUM_PLAYERS; ++i){
        free(copyPods[i]);
    }

    return Score;
}

Solution* ComputeSolution(Pod* pods[], Checkpoint* checkpoints[], Solution* lastTurnSolution){
    //Init population
    int populationLenght = MAX_POPULATION + (lastTurnSolution? 1:0);
    Solution* population[populationLenght];

    for(int i = 0; i < MAX_POPULATION; ++i){
        population[i] = new Solution();
    }

    //Insert last solution into the pool with an offset on its moves as first one has already been used
    if(lastTurnSolution){
        lastTurnSolution->ConsumeTurn();
        population[populationLenght-1] = lastTurnSolution;
    }
    
    double t = GetTimeSinceTurnStarted();
    //Compute simulations for the allowed time
    while(t < RESPONSE_TIME){
        //Evaluate solutions
        for(int i = 0; i < populationLenght; ++i){
            population[i]->ScoreSolution(pods, checkpoints);
        }
        
        //Sort by score
        sort(population, population+populationLenght, CompareSolutionsByScore);                
        
        //Override last 50% with the best values
        int index = 0;
        int elementsToDuplicate = static_cast<int>(populationLenght*MAX_PERCENTAJE_BEST_SCORE_TO_KEEP);
        for(int i = elementsToDuplicate; i < populationLenght; ++i, ++index){
            if(index < elementsToDuplicate*2){
                population[i]->CloneFrom(*population[index]);
                
                //And mutate them(bigger changes at first, smaller with the time)
                population[i]->Mutate(1-t/RESPONSE_TIME);
            }else{
                //The rest of the % do a 100% random mutate
                population[i]->Mutate(1.0f);
            }

        }
        
        //Update timer
        t = GetTimeSinceTurnStarted();
    }    
    //Sort Solutions by score
    sort(population, population+populationLenght, CompareSolutionsByScore);

    Solution* ret = population[0];
    //Free resources
    for(int i = 1; i < populationLenght; ++i){     
        free(population[i]);
    }
    
    //Return best one
    return ret;
}

void Play(Pod*const pods[], Checkpoint* checkpoints[]) {
    int podsLenght =NUM_PODS_PER_PLAYER * NUM_PLAYERS;
    for (float t = 0.0f; t <= 1.0f ; t += SIMULATION_TICK_INTERVAL) {
        //Move pods
        for(int i = 0; i < podsLenght; ++i){
            pods[i]->Move(SIMULATION_TICK_INTERVAL);            
        }

        //Check pod collisions
        for(int i = 0; i < podsLenght; ++i){
            //With desired checkpoint
            Collision* col = pods[i]->CheckCollision(*checkpoints[pods[i]->nextCheckpointId]);
            if(col){
                col->a.Bounce(col->b);

                free(col);
                col = nullptr;
            }

            //With other pods
            for(int j = i+1; j < podsLenght; ++j){
                col = pods[i]->CheckCollision(*pods[j]);
                
                if(col){                    
                    col->a.Bounce(col->b);

                    free(col);
                    col = nullptr;
                }
            }
        }
    }

    for (int i = 0; i < podsLenght; ++i) {
        pods[i]->EndTurnCalculations();
    }
}

void Test(Pod*const pods[], Checkpoint* checkpoints[]) {

    int podsLenght =NUM_PODS_PER_PLAYER * NUM_PLAYERS;    

    for (int i = 0; i < podsLenght; ++i) {
        pods[i]->Rotate(Point(8000, 4500));
        pods[i]->Boost(100);
    }

    Play(pods, checkpoints);
}

void Test(Pod*const pods[], Checkpoint* checkpoints[],const Solution& solution) {

    //Copy pods to avoid modyfing the real ones
    Pod* copyPods[NUM_PODS_PER_PLAYER * NUM_PLAYERS];
    for(int i = 0; i < NUM_PLAYERS; ++i){
        shared_ptr<BoostManager> boostManager = make_shared<BoostManager>(pods[i]->boostManager->boostUsed);
        for(int j = i*NUM_PODS_PER_PLAYER; j < (i+1)*NUM_PODS_PER_PLAYER; ++j){
            copyPods[j] = new Pod(*pods[j],boostManager);                
        }
    }

    copyPods[0]->SimulateMove(*solution.moves1[0]);
    copyPods[1]->SimulateMove(*solution.moves2[0]);
     //For enemies we have no moves, so they will just move to next checkpoint at max speed(can be upgraded by finding them a solution)
    copyPods[2]->Rotate(*checkpoints[copyPods[2]->nextCheckpointId]);
    copyPods[2]->Boost(100);
    copyPods[3]->Rotate(*checkpoints[copyPods[3]->nextCheckpointId]);
    copyPods[3]->Boost(100);

    Play(copyPods, checkpoints);

    //Free copy pods
    for(int i = 0; i < NUM_PODS_PER_PLAYER* NUM_PLAYERS; ++i){
        cerr << "Simulation id " << copyPods[i]->id << " x " << copyPods[i]->x << " y " << copyPods[i]->y << " vx " << copyPods[i]->vx << " vy " << copyPods[i]->vy << " nextCh " << copyPods[i]->nextCheckpointId << endl;
        free(copyPods[i]);
    }      
}

bool CompareSolutionsByScore(Solution* a, Solution* b){
    return a->Score > b->Score;
}

//I know rand is not the best, but will be using it at first, if i have enought time i'll try to set in place a random generator
float RandomRange(float min, float max){
    return min + rand() % static_cast<int>(max-min +1);
}

float ComputeScore(Pod*const pods[], Checkpoint* checkpoints[]){
    //Identify runner-hunter
    Pod* runners[NUM_PLAYERS];
    Pod* hunters[NUM_PLAYERS];
    for(int i = 0; i < NUM_PLAYERS; ++i){
        Pod* runner = pods[i*NUM_PODS_PER_PLAYER];
        for(int j= i*NUM_PODS_PER_PLAYER+1; j < NUM_PODS_PER_PLAYER; ++j){
            //If the new one has more checkpoints, he is the runner
            if(pods[j]->checkpointsElapsed > runner->checkpointsElapsed){
                hunters[i] = runner;                
                runner = pods[j];
                continue;
            }else if(pods[j]->checkpointsElapsed == runner->checkpointsElapsed){//If they have the same number, then it compares the distance to the next checkpoint
                if(pods[j]->Distance2(*checkpoints[pods[j]->nextCheckpointId]) < runner->Distance2(*checkpoints[runner->nextCheckpointId])){
                    hunters[i] = runner;
                    runner = pods[j];
                    continue;
                }
            }
            //If its not a runner, it goes to hunters
            hunters[i] = pods[j];            
        }
        runners[i] = runner;
    }

    //Compute score
    float ourRunnerScore = runners[0]->checkpointsElapsed * SCORE_PER_CHECKPOINT - runners[0]->Distance(*checkpoints[runners[0]->nextCheckpointId]);
    float enemyRunnerScore =runners[1]->checkpointsElapsed * SCORE_PER_CHECKPOINT - runners[1]->Distance(*checkpoints[runners[1]->nextCheckpointId]);
    float runnerScore = ourRunnerScore-enemyRunnerScore;    
    //cerr << "our r " << ourRunnerScore << " enemy r " << enemyRunnerScore << " total r" << runnerScore << endl;
    float hunterScore = -hunters[0]->Distance(*checkpoints[runners[1]->nextCheckpointId]);
    //cerr << " hunter id " << hunterScore <<endl;
    float Score = runnerScore * RUNNER_HUNTER_WEIGHT + hunterScore;    
    //cerr << "Total " << Score <<endl;

    return Score;
}

double GetTimeSinceTurnStarted(){
    return (clock() - TurnStartClock)/((double)CLOCKS_PER_SEC / 1000);
}


/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/
int main()
{
    //Init rand seed
    uint seed = time(NULL);
    srand(seed);
    cerr << "Seed " << seed << endl;

    int laps;
    cin >> laps; cin.ignore();

    int checkpointCount;
    cin >> checkpointCount; cin.ignore();

    Checkpoint* checkpoints[checkpointCount];
    for (int i = 0; i < checkpointCount; i++) {
        int checkpointX;
        int checkpointY;
        cin >> checkpointX >> checkpointY; cin.ignore();
        checkpoints[i] = new Checkpoint(checkpointX, checkpointY,i);
    }

    Pod* pods[NUM_PODS_PER_PLAYER*NUM_PLAYERS];
    for(int i = 0; i < NUM_PLAYERS; ++i){//We init ours and enemy ones
        shared_ptr<BoostManager> boostManager = make_shared<BoostManager>();
        for(int j = i*NUM_PODS_PER_PLAYER; j < (i+1)*NUM_PODS_PER_PLAYER; ++j){
            pods[j] = new Pod(j,boostManager);
        }
    }

    Solution* lastTurnSolution = nullptr;
    // game loop
    while (1) {
        TurnStartClock = clock();
        for (int i = 0; i < NUM_PODS_PER_PLAYER; i++) {
            int x; // x position of your pod
            int y; // y position of your pod
            int vx; // x speed of your pod
            int vy; // y speed of your pod
            int angle; // angle of your pod
            int nextCheckPointId; // next check point id of your pod
            cin >> x >> y >> vx >> vy >> angle >> nextCheckPointId; cin.ignore();
            cerr << "real id " << i << " x " << x << " y " << y << " vx " << vx << " vy " << vy << " nextCh " << nextCheckPointId << endl;
            pods[i]->UpdateValues(x,y, vx, vy, angle, nextCheckPointId);
        }

        for (int i = NUM_PODS_PER_PLAYER; i < NUM_PODS_PER_PLAYER*NUM_PLAYERS; i++) {
            int x2; // x position of the opponent's pod
            int y2; // y position of the opponent's pod
            int vx2; // x speed of the opponent's pod
            int vy2; // y speed of the opponent's pod
            int angle2; // angle of the opponent's pod
            int nextCheckPointId2; // next check point id of the opponent's pod
            cin >> x2 >> y2 >> vx2 >> vy2 >> angle2 >> nextCheckPointId2; cin.ignore();
            cerr << "real id " << i << " x " << x2 << " y " << y2 << " vx " << vx2 << " vy " << vy2 << " nextCh " << nextCheckPointId2 << endl;
            pods[i]->UpdateValues(x2, y2, vx2, vy2, angle2,  nextCheckPointId2);
        }

        cerr << "Real Score " << ComputeScore(pods, checkpoints) << endl;

        lastTurnSolution = ComputeSolution(pods, checkpoints, lastTurnSolution);

        pods[0]->Output(*lastTurnSolution->moves1[0]);
        pods[1]->Output(*lastTurnSolution->moves2[0]);
    }

    //free resources    
    free(lastTurnSolution);

    for(int i= 0; i < checkpointCount; ++i){
        free(checkpoints[i]);
        checkpoints[i] = nullptr;
    }    

    for(int i = 0; i < NUM_PODS_PER_PLAYER*NUM_PLAYERS; ++i){
        free(pods[i]);
        pods[i] = nullptr;
    }    

}